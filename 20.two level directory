//5)Design a C program to organize the file using two level directory structure.
//Code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_SUBDIRS 10
#define MAX_FILES 10
#define MAX_NAME_LENGTH 50
typedef struct {
    char name[MAX_NAME_LENGTH];
    int size; 
} File;
typedef struct {
    char name[MAX_NAME_LENGTH];
    File files[MAX_FILES];
    int fileCount;
} SubDirectory;
typedef struct {
    SubDirectory subdirs[MAX_SUBDIRS];
    int subdirCount;
} Directory;
void initializeDirectory(Directory *dir) {
    dir->subdirCount = 0;
}
void createSubDirectory(Directory *dir) {
    if (dir->subdirCount >= MAX_SUBDIRS) {
        printf("Maximum number of subdirectories reached.\n");
        return;
    }
    SubDirectory newSubDir;
    printf("Enter the name of the subdirectory: ");
    scanf("%s", newSubDir.name);
    newSubDir.fileCount = 0;
    dir->subdirs[dir->subdirCount] = newSubDir;
    dir->subdirCount++;
    printf("Subdirectory '%s' created successfully.\n", newSubDir.name);
}
void createFile(Directory *dir) {
    char subDirName[MAX_NAME_LENGTH];
    printf("Enter the name of the subdirectory to create a file in: ");
    scanf("%s", subDirName);
    for (int i = 0; i < dir->subdirCount; i++) {
        if (strcmp(dir->subdirs[i].name, subDirName) == 0) {
            if (dir->subdirs[i].fileCount >= MAX_FILES) {
                printf("Maximum number of files in subdirectory '%s' reached.\n", subDirName);
                return;
            }
            File newFile;
            printf("Enter the name of the file: ");
            scanf("%s", newFile.name);
            printf("Enter the size of the file (in bytes): ");
            scanf("%d", &newFile.size);
            dir->subdirs[i].files[dir->subdirs[i].fileCount] = newFile;
            dir->subdirs[i].fileCount++;
            printf("File '%s' created successfully in subdirectory '%s'.\n", newFile.name, subDirName);
            return;
        }
    }
    printf("Subdirectory '%s' not found.\n", subDirName);
}

void deleteFile(Directory *dir) {
    char subDirName[MAX_NAME_LENGTH];
    char fileName[MAX_NAME_LENGTH];
    printf("Enter the name of the subdirectory: ");
    scanf("%s", subDirName);
    printf("Enter the name of the file to delete: ");
    scanf("%s", fileName);
    for (int i = 0; i < dir->subdirCount; i++) {
        if (strcmp(dir->subdirs[i].name, subDirName) == 0) {
            for (int j = 0; j < dir->subdirs[i].fileCount; j++) {
                if (strcmp(dir->subdirs[i].files[j].name, fileName) == 0) {
                    for (int k = j; k < dir->subdirs[i].fileCount - 1; k++) {
                        dir->subdirs[i].files[k] = dir->subdirs[i].files[k + 1];
                    }
                    dir->subdirs[i].fileCount--;
                    printf("File '%s' deleted successfully from subdirectory '%s'.\n", fileName, subDirName);
                    return;
                }
            }
            printf("File '%s' not found in subdirectory '%s'.\n", fileName, subDirName);
            return;
        }
    }
    printf("Subdirectory '%s' not found.\n", subDirName);
}
void listFiles(Directory *dir) {
    char subDirName[MAX_NAME_LENGTH];
    printf("Enter the name of the subdirectory: ");
    scanf("%s", subDirName);
    for (int i = 0; i < dir->subdirCount; i++) {
                if (strcmp(dir->subdirs[i].name, subDirName) == 0) {
            if (dir->subdirs[i].fileCount == 0) {
                printf("No files in subdirectory '%s'.\n", subDirName);
            } else {
                printf("Files in subdirectory '%s':\n", subDirName);
                for (int j = 0; j < dir->subdirs[i].fileCount; j++) {
                    printf("File Name: %s, Size: %d bytes\n", dir->subdirs[i].files[j].name, dir->subdirs[i].files[j].size);
                }
            }
            return;
        }
    }
    printf("Subdirectory '%s' not found.\n", subDirName);
}

int main() {
    Directory dir;
    initializeDirectory(&dir);
    int choice;

    do {
        printf("\n--- Two-Level Directory Management ---\n");
        printf("1. Create Subdirectory\n");
        printf("2. Create File in Subdirectory\n");
        printf("3. Delete File from Subdirectory\n");
        printf("4. List Files in Subdirectory\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                createSubDirectory(&dir);
                break;
            case 2:
                createFile(&dir);
                break;
            case 3:
                deleteFile(&dir);
                break;
            case 4:
                listFiles(&dir);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 5);
    return 0;
}
